---
- name: Ensure development packages and libraries are installed
  apt:
    state: latest
    pkg: "{{ item }}"
  loop:
    - build-essential
    - gcc
    - git
    - gitk
    - golang
    - httpie
    - jq
    - make
    - pipx
    - python3-venv
    - shellcheck
    - shfmt
    - universal-ctags
  loop_control:
    label: "{{ item }}"

- name: install development tools
  community.general.pipx:
    state: latest
    name: "{{ item }}"
    install_deps: true
  loop:
    - bandit
    - black
    - coverage
    - flake8
    - glances
    - mypy
    - pre-commit
    - pytest
    - ruff
    - uv
    - yamlfmt
    - yamllint
  become: false

- name: Check if pipx path is present
  shell: test -d ~/.local/bin && echo "Pipx ensurepath executed" || echo "Pipx ensurepath not executed"
  register: pipx_ensurepath_output
  changed_when: false
  ignore_errors: true
  become: false

- name: Execute pipx ensurepath, if required
  command: pipx ensurepath
  when: pipx_ensurepath_output.rc != 0
  become: false


- name: Ensure pyenv is installed
  ansible.builtin.debug:
    msg: |
      Pyenv will be installed, via equivalent of:
      curl -fsSL https://pyenv.run | bash
      reference url: https://github.com/pyenv/pyenv

- name: Check if pyenv binary exists
  ansible.builtin.stat:
    path: "{{ home_dir }}/.pyenv/bin/pyenv"
  register: pyenv_binary
  become: false

- name: Download pyenv installer script
  ansible.builtin.get_url:
    url: https://pyenv.run
    dest: "{{ home_dir }}/pyenv-installer.sh"
    mode: '0755'
    timeout: 30
  become: false
  when: not pyenv_binary.stat.exists

- name: Run pyenv installer script
  ansible.builtin.command: bash "{{ home_dir }}/pyenv-installer.sh"
  environment:
    HOME: "{{ home_dir }}"
  become: false
  when: not pyenv_binary.stat.exists
  register: pyenv_install_result

- name: Verify pyenv installation was successful
  ansible.builtin.command:
    argv:
      - "{{ home_dir }}/.pyenv/bin/pyenv"
      - --version
  register: pyenv_verify
  become: false
  when: not pyenv_binary.stat.exists
  failed_when: pyenv_verify.rc != 0

- name: Remove pyenv installer script
  ansible.builtin.file:
    path: "{{ home_dir }}/pyenv-installer.sh"
    state: absent
  become: false
  when: not pyenv_binary.stat.exists

- name: pyenv information message
  ansible.builtin.debug:
    msg: |
      Pyenv has been installed successfully.
      The following will be added to your ~/.bashrc environment via env role in this playbook:
        export PYENV_ROOT="$HOME/.pyenv"
        [[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
        eval "$(pyenv init - bash)"
      Then restart your shell or run: exec "$SHELL"
  when: not pyenv_binary.stat.exists or pyenv_install_result is defined
